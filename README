The basic architecture is fairly simple. Each class handles one parse rule. Then, to actually get the data from the parse, one calls next_value, which will recursively call next_value on each of its components to get the final value. It worked fairly well, mostly. Range ended up with a little more crud than I would have liked it's fairly simple, but there's a lot of error handling related crud that obscures what it's doing... I might have overengineered this just a little bit. The other major complexity is in Job.next_parse, which was a nightmare. All sorts of bugs caused by obscure (and not so obscure) combinations of inputs. I honestly have no faith that it works correctly for all inputs, and not much faith that it even works correctly for common inputs. It's not exactly clear to me how much of this was self-inflicted by my choice of approaches and how much was just inherent complexities in the task. I will say that, in hindsight, I think it would have been easier if I had simulated time passing rather than trying to jump directly to the solution.
If I spent some time tomorrow, I probably could clean it up a lot and improve the test suite and make it much better, but tonight I am too tired to make that happen. I was moderately pleased with both Doctests and TDD. Doctests were very slick and great for giving a userbase a feel for how the module works. As the primary test suite of a program, though, I felt that it was more of a pain than I would have liked to add a lot of tests and if I had a failing test it was harder than I would have liked to get information about the failure out of it. This would be less of a problem, I suspect, if you consider this with your design or if you don't use print debugging. TDD was fairly nice as well, although I definitely lost some of my discipline as it got later in the day and I grew more tired.
You can see some details of my process in my git logs, it would be interesting, I think, although I tend to ramble a little. My git is pretty much entirely self-taught, though, so there are some habits that more experienced people have that I haven't developed (such as branches).